{"version":3,"sources":["polyfill.js","containers/DefaultLayout/AuthenticatedComponent.js","App.js","serviceWorker.js","index.js"],"names":["window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","AuthenticatedComponent","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","user","id","nama_lengkap","username","password","inherits","createClass","key","value","_this2","jwt","localStorage","getItem","Axios","get","then","res","data","props","history","push","setState","children","Component","withRouter","DefaultLayout","React","lazy","Promise","all","__webpack_require__","e","bind","Login","App","react_default","a","createElement","react_router_dom","Suspense","fallback","className","react_router","exact","path","name","render","DefaultLayout_AuthenticatedComponent","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6oEA+BA,WAEE,GAAmC,oBAAvBA,OAAOC,YAA6B,OAAO,EAEvD,SAASA,EAAcC,EAAOC,GAC5BA,EAASA,GAAU,CAAEC,SAAS,EAAOC,YAAY,EAAOC,YAAQC,GAChE,IAAIC,EAAMC,SAASC,YAAa,eAEhC,OADAF,EAAIG,gBAAiBT,EAAOC,EAAOC,QAASD,EAAOE,WAAYF,EAAOG,QAC/DE,EAGTP,EAAYW,UAAYZ,OAAOa,MAAMD,UAErCZ,OAAOC,YAAcA,EAbvB,2IC3Baa,EAAb,SAAAC,GACE,SAAAD,IAAc,IAAAE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACZE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QACKI,MAAQ,CACXC,KAAM,CACJC,GAAI,GACJC,aAAc,GACdC,SAAU,IAEZA,SAAU,KACVC,SAAU,MATAZ,EADhB,OAAAC,OAAAY,EAAA,EAAAZ,CAAAH,EAAAC,GAAAE,OAAAa,EAAA,EAAAb,CAAAH,EAAA,EAAAiB,IAAA,oBAAAC,MAAA,WAcsB,IAAAC,EAAAd,KACZe,EAAMC,aAAaC,QAAQ,0BAC5BF,EAGHG,IAAMC,IACJ,8DAAgEJ,GAChEK,KAAK,SAAAC,GACe,IAAhBA,EAAIC,KAAKhB,GACXQ,EAAKS,MAAMC,QAAQC,KAAK,UAExBX,EAAKY,SAAS,CAAErB,KAAMgB,EAAIC,SAR9BtB,KAAKuB,MAAMC,QAAQC,KAAK,YAjB9B,CAAAb,IAAA,SAAAC,MAAA,WAgCI,OAAOb,KAAKuB,MAAMI,aAhCtBhC,EAAA,CAA4CiC,aAoC7BC,cAAWlC,GC7BpBmC,EAAgBC,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,IAAAD,EAAAC,EAAA,MAAAhB,KAAAe,EAAAE,KAAA,cAGjCC,EAAQP,IAAMC,KAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,MAAAhB,KAAAe,EAAAE,KAAA,cA4BhBE,mLAxBX,OACEC,EAAAC,EAAAC,cAACC,EAAA,WAAD,KACEH,EAAAC,EAAAC,cAACF,EAAAC,EAAMG,SAAP,CAAgBC,SAbtBL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,oCAAf,eAcQN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,SACLC,KAAK,aACLC,OAAQ,SAAA5B,GAAK,OAAIiB,EAAAC,EAAAC,cAACJ,EAAUf,MAE9BiB,EAAAC,EAAAC,cAACU,EAAD,KACEZ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEE,KAAK,IACLC,KAAK,OACLC,OAAQ,SAAA5B,GAAK,OAAIiB,EAAAC,EAAAC,cAACZ,EAAkBP,iBAhBlCK,aCNEyB,QACW,cAA7BxE,OAAOyE,SAASC,UAEe,UAA7B1E,OAAOyE,SAASC,UAEhB1E,OAAOyE,SAASC,SAASC,MACvB,2DCNNC,IAASN,OAAOX,EAAAC,EAAAC,cAACgB,EAAD,MAASpE,SAASqE,eAAe,SD+G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.37e47b7c.chunk.js","sourcesContent":["/*\n* required polyfills\n*/\nimport \"core-js\";\nimport 'core-js/features/set/map';\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol'\n// import 'core-js/es6/object'\n// import 'core-js/es6/function'\n// import 'core-js/es6/parse-int'\n// import 'core-js/es6/parse-float'\n// import 'core-js/es6/number'\n// import 'core-js/es6/math'\n// import 'core-js/es6/string'\n// import 'core-js/es6/date'\n// import 'core-js/es6/array'\n// import 'core-js/es6/regexp'\n// import 'core-js/es6/map'\n// import 'core-js/es6/weak-map'\n// import 'core-js/es6/set'\n// import 'core-js/es7/object'\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect'\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\n// import 'core-js/es7/reflect'\n\n// CustomEvent() constructor functionality in IE9, IE10, IE11\n(function () {\n\n  if ( typeof window.CustomEvent === \"function\" ) return false\n\n  function CustomEvent ( event, params ) {\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\n    var evt = document.createEvent( 'CustomEvent' )\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail )\n    return evt\n  }\n\n  CustomEvent.prototype = window.Event.prototype\n\n  window.CustomEvent = CustomEvent\n})()\n","import { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport Axios from \"axios\";\n\nexport class AuthenticatedComponent extends Component {\n  constructor() {\n    super();\n    this.state = {\n      user: {\n        id: \"\",\n        nama_lengkap: \"\",\n        username: \"\"\n      },\n      username: null,\n      password: null\n    };\n  }\n\n  componentDidMount() {\n    const jwt = localStorage.getItem(\"jwt-token-lapor-online\");\n    if (!jwt) {\n      this.props.history.push(\"/login\");\n    } else {\n      Axios.get(\n        \"https://api.fawwazlab.com/lapor/api/user/get_user_by_token/\" + jwt\n      ).then(res => {\n        if (res.data.id === 0) {\n          this.props.history.push(\"/login\");\n        } else {\n          this.setState({ user: res.data });\n        }\n      });\n    }\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nexport default withRouter(AuthenticatedComponent);\n","import React, { Component } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n// import { renderRoutes } from 'react-router-config';\nimport \"./App.scss\";\nimport AuthenticatedComponent from \"./containers/DefaultLayout/AuthenticatedComponent\";\n\nconst loading = () => (\n  <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>\n);\n\n// Containers\nconst DefaultLayout = React.lazy(() => import(\"./containers/DefaultLayout\"));\n\n// Pages\nconst Login = React.lazy(() => import(\"./views/Pages/Login\"));\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <React.Suspense fallback={loading()}>\n          <Switch>\n            <Route\n              exact\n              path=\"/login\"\n              name=\"Login Page\"\n              render={props => <Login {...props} />}\n            />\n            <AuthenticatedComponent>\n              <Route\n                path=\"/\"\n                name=\"Home\"\n                render={props => <DefaultLayout {...props} />}\n              />\n            </AuthenticatedComponent>\n          </Switch>\n        </React.Suspense>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"react-app-polyfill/ie9\"; // For IE 9-11 support\nimport \"react-app-polyfill/stable\";\n// import 'react-app-polyfill/ie11'; // For IE 11 support\nimport \"./polyfill\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}